Группа экстеншенов:
BeforeAllCallback
BeforeEachCallback
BeforeTestExecutionCallback
AfterTestExecutionCallback
AfterEachCallback
AfterAllCallback
Это интефейсы который поставляются с библиотекой Junit Jupiter API и все они наследуются от одного базового extension: Extension

public interface BeforeAllCallback extends Extension {
    void beforeAll(ExtensionContext context) throws Exception;


Интерфейс Extension это т.н интерфейс-метка, в котором нет никаких методов, он только показывает, что его наследник должен обладать определенными свойствами.
В данном случае показать что любой наследник является Junit Extension

У всех callback экстеншенов есть метод, который принимает параметр ExtensionContext - ключевой элемент при работе с junit extension:
Позволяет получить информацию о том, в каком месте lifecycle мы находимся и все, что находится вокруг этого места.
Например, если мы находимся в месте lifecycle рядом с тестом, т.е. мы знаем какой тест начинаем выполнять,
то мы можем получить из ExtensionContext всю информацию об этом тесте (параметры, название, какие над ним аннотации и т.д.)
Вторая часть для чего нужен ExtensionContext - это сохранять результаты работы нашего созданного экстеншена.
Все методы callback экстеншенов имеют тип возвращаемого значения void т.е. ничего не возвращают, все полезные действия,
которые произвел экстеншен, мы сохраняем в context (данные хранятся в виде ключ-значение HashMap)


Кроме callback в жизненном цикле теста есть ExceptionHandler-ы

LifecycleMethodExecutionExceptionHandler
TestExecutionExceptionHandler

public interface TestExecutionExceptionHandler extends Extension {
    void handleTestExecutionException(ExtensionContext context, Throwable throwable) throws Throwable;
}

У ExceptionHandler также есть один метод помимо ExtensionContext он принимает еще один параметр Throwable - это исключение,
которое было выброшено либо в тесте, либо в методе и которое предлагается нам обработать (залогировать,
почистить за собой ресурсы, почистить БД, сделать скриншот ...) и не забыть пробросить это исключение дальше, т.к. по исключению,
которое вылетело на самый верх Junit определяет какой статус присвоить тесту (Passed, Broken, Failed) и соответственно,
если исключение дальше не пробросить, то тесты всегда будут зелеными!

Чем плохи аннотации?
• Выполнение метода @Before.. @After нельзя подстраивать под конкретный тест;
• Пишем много классов с разными наборами @Before.. @After и начинаем от них наследоваться;
• Не являются средством декларативного написания тестов
• Имеем проблемы с переопределением и перегрузкой (разные для static и не static методов)
• Банальная задача “сделать скрин упавшего теста” не решается

В последнем Junit появились дополнительные аннотации:
@BeforeSuite
@AfterSuite

